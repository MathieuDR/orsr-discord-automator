@using DiscordBot.Dashboard.Models
@if (loaded) {
    <Column ColumnSize="ColumnSize.Is12">
        <Field>
            <FieldLabel>@FieldName</FieldLabel>
            <Autocomplete TItem="ExtendedChannel"
                          TValue="DiscordChannelId"
                          Data="@Pool"
                          TextField="@((channel) => channel.Channel.Name)"
                          ValueField="@(channel => channel.Channel.Id)"
                          Placeholder="Search channel..."
                          Filter="AutocompleteFilter.Contains"
                          SelectedValue="SelectedChannel"
                          SelectedValueChanged="OnChange">

                <NotFoundContent> Sorry... @context was not found!</NotFoundContent>
                <ItemContent>
                    @{
                        var color = @context.Item.IsGray ? TextColor.Black50 : TextColor.Body;
                    }
                    <Text TextColor="color">
                        @context.Text
                    </Text>
                </ItemContent>
            </Autocomplete>
        </Field>
    </Column>
} else {
    <Column ColumnSize="ColumnSize.Is12">
        <Paragraph>Still loading.</Paragraph>
    </Column>
}

@code {
    bool loaded = false;

    [Parameter]
    public string FieldName { get; set; } = "Selected channel";

    // public string selectedText;

    [Inject]
    public ILogger<ExtendedChannelSelector> Logger { get; set; }

    [Inject]
    public ICachedDiscordService DiscordService { get; set; }

    [Inject]
    public INotificationService NotificationService { get; set; }

    [Parameter]
    public Guild? Guild { get; set; }

    [Parameter]
    public DiscordChannelId SelectedChannel { get; set; }

    [Parameter]
    public EventCallback<DiscordChannelId> SelectedChannelChanged { get; set; }

    [Parameter]
    public List<ExtendedChannel>? Channels { get; set; }
    
    public List<ExtendedChannel> Pool { get; private set; } = new ();

    private async Task GetChannels(int retries = 0) {
        var userResult = await DiscordService.GetOrderedTextChannels(Guild.Id);
        if (userResult.IsSuccess) {
            var list = userResult.Value.Select(x => new ExtendedChannel(x, false, false)).ToList();
            UpdatePool(list);
            loaded = true;
        } else {
            if (retries < 3) {
                await Task.Delay(1000);
                await GetChannels(retries + 1);
            } else {
                await NotificationService.Error($"Could not retrieve users for guild {Guild.Name} ({Guild.Id}).");
            }
        }
    }

    private void UpdatePool(List<ExtendedChannel> newChannels) {
        if (!newChannels.Select(x => x.Channel.Id).Contains(SelectedChannel)) {
            SelectedChannel = DiscordChannelId.Empty;
        }
        Pool.Clear();
        Pool.AddRange(newChannels);
    }

    protected override async Task OnParametersSetAsync() {
    // Can be null, but shouldn't be since it's blazor component lifecycle.
        if (Channels is not null && Channels.Count > 0) {
            UpdatePool(Channels);
            loaded = true;
        }else if (Guild is not null) {
            await GetChannels();
        } else {
            _ = NotificationService.Error("We need a guild or a list of users.");
        }

        await base.OnParametersSetAsync();
    }

    private void OnChange(DiscordChannelId id) {
        SelectedChannel = id;
        SelectedChannelChanged.InvokeAsync(id);
    }

}