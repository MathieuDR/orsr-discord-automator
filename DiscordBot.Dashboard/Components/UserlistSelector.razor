@if (loaded) {
    <Column ColumnSize="ColumnSize.Is12">
        <Field>
            <FieldLabel>@FieldName</FieldLabel>
            <Autocomplete TItem="GuildUser"
                          TValue="DiscordUserId"
                          Data="@Pool"
                          TextField="@((user) => user.Username)"
                          ValueField="@(user => user.Id)"
                          Placeholder="Search user..."
                          Filter="AutocompleteFilter.Contains"
                          @bind-SelectedTexts="multipleSelectionTexts"
                          SelectedValuesChanged="OnListChanged"
                          SelectedValues="SelectedUsers"
                          Multiple>

                <NotFoundContent> Sorry... @context was not found!</NotFoundContent>
            </Autocomplete>
        </Field>
    </Column>
} else {
    <Column ColumnSize="ColumnSize.Is12">
        <Paragraph>Still loading.</Paragraph>
    </Column>
}

@code {
    bool loaded = false;

    [Parameter]
    public string FieldName { get; set; } = "Selected users";

    public List<string> multipleSelectionTexts = new();

    [Inject]
    public ILogger<UserlistSelector> Logger { get; set; }

    [Inject]
    public ICachedDiscordService DiscordService { get; set; }

    [Inject]
    public INotificationService NotificationService { get; set; }

    [Parameter]
    public Guild? Guild { get; set; }

    [Parameter]
    public List<DiscordUserId> SelectedUsers { get; set; } = new List<DiscordUserId>();

    [Parameter]
    public EventCallback<List<DiscordUserId>> SelectedUsersChanged { get; set; }

    [Parameter]
    public List<GuildUser>? Users { get; set; }
    
    public List<GuildUser> Pool { get; private set; } = new ();

    private async Task GetUsers(int retries = 0) {
        var userResult = await DiscordService.GetUsers(Guild.Id);
        if (userResult.IsSuccess) {
            UpdatePool(userResult.Value
                .Where(x => !x.IsBot)
                .ToList());
            loaded = true;
        } else {
            if (retries < 3) {
                await Task.Delay(1000);
                await GetUsers(retries + 1);
            } else {
                await NotificationService.Error($"Could not retrieve users for guild {Guild.Name} ({Guild.Id}).");
            }
        }
    }

    private void UpdatePool(List<GuildUser> newUsers) {

        var toKeep = newUsers.Where(x => SelectedUsers.Contains(x.Id)).ToList();
        
        SelectedUsers.Clear();
        SelectedUsers.AddRange(toKeep.Select(x=>x.Id));
        multipleSelectionTexts.Clear();
        multipleSelectionTexts.AddRange(toKeep.Select(x=>x.Username));
        
        Pool.Clear();
        Pool.AddRange(newUsers);
    }

    protected override async Task OnParametersSetAsync() {
    // Can be null, but shouldn't be since it's blazor component lifecycle.
        if (Users is not null && Users.Count > 0) {
            UpdatePool(Users);
            loaded = true;
        }else if (Guild is not null) {
            await GetUsers();
        } else {
            _ = NotificationService.Error("We need a guild or a list of users.");
        }

        await base.OnParametersSetAsync();
    }

    private void OnListChanged(List<DiscordUserId> obj) {
        SelectedUsersChanged.InvokeAsync(obj);
    }

}